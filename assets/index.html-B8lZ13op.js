import{_ as i,c as a,a as n,o as e}from"./app-CNZkbZ7y.js";const l={};function t(d,s){return e(),a("div",null,s[0]||(s[0]=[n(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Data</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ConfigurationProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">spring.redisson</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> RedissonConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 任务线程数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> threads</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * netty 线程数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nettyThreads</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 最小空闲连接数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minimumIdleSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RedissonConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">threads</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nettyThreads</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">minimumIdleSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-类定义与注解" tabindex="-1"><a class="header-anchor" href="#_1-类定义与注解"><span>1. 类定义与注解</span></a></h2><ul><li><strong><code>@Data</code></strong>：来自 Lombok 库，它会自动生成所有字段的 getter 和 setter 方法、<code>toString()</code> 方法、<code>equals()</code> 和 <code>hashCode()</code> 实现以及一个无参构造函数（如果未显式定义其他构造函数）。</li><li><strong><code>@ConfigurationProperties(&quot;spring.redisson&quot;)</code></strong>：告诉 Spring Boot 将前缀为 <code>spring.redisson</code> 的配置项绑定到这个类的字段上。</li></ul><h2 id="_2-注入流程" tabindex="-1"><a class="header-anchor" href="#_2-注入流程"><span>2. 注入流程</span></a></h2><h4 id="a-扫描与注册" tabindex="-1"><a class="header-anchor" href="#a-扫描与注册"><span>a. 扫描与注册</span></a></h4><p>Spring Boot 在启动时会扫描带有 <code>@ConfigurationProperties</code> 注解的类，并将其注册为 Spring 容器中的 Bean。这意味着你需要确保你的 <code>RedissonConfig</code> 类被 Spring Boot 扫描到，通常通过以下方式之一：</p><ul><li>将该类放置在主应用程序类所在的包或其子包下。</li><li>显式地使用 <code>@EnableConfigurationProperties(RedissonConfig.class)</code> 注解来启用该配置类。 即使你的 <code>RedissonConfig</code> 类不在主应用程序类的包及其子包下，通过使用 <code>@EnableConfigurationProperties(RedissonConfig.class)</code> 注解，你也可以明确告知 Spring Boot 需要处理这个特定的 <code>@ConfigurationProperties</code> 类。<strong>增强可读性和维护性</strong>：即使类已经在扫描范围内，使用 <code>@EnableConfigurationProperties</code> 可以增加代码的清晰度，明确指出哪些类是用于配置属性绑定的。</li></ul><h4 id="b-实例化" tabindex="-1"><a class="header-anchor" href="#b-实例化"><span>b. 实例化</span></a></h4><p>当 Spring Boot 准备实例化 <code>RedissonConfig</code> 时，它首先调用类的无参构造方法创建对象实例。在这个阶段，由于你在构造方法中设置了默认值（例如 <code>threads</code>, <code>nettyThreads</code>, 和 <code>minimumIdleSize</code> 都设置为 16），这些字段会被初始化为这些默认值。</p><h4 id="c-属性绑定" tabindex="-1"><a class="header-anchor" href="#c-属性绑定"><span>c. 属性绑定</span></a></h4><p>接下来，Spring Boot 会查找 <code>application.properties</code> 或 <code>application.yml</code> 文件中以 <code>spring.redisson</code> 开头的相关属性，并尝试将它们绑定到 <code>RedissonConfig</code> 类对应的字段上。例如，假设你的配置文件中有如下内容：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring.redisson.threads=32</span></span>
<span class="line"><span>spring.redisson.nettyThreads=64</span></span>
<span class="line"><span>spring.redisson.minimumIdleSize=8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 会将这些值分别赋给 <code>RedissonConfig</code> 类中的 <code>threads</code>, <code>nettyThreads</code>, 和 <code>minimumIdleSize</code> 字段，覆盖掉之前在构造函数中设定的默认值。</p><p>注意：这一步骤不需要 setter 方法的存在，因为 Spring 使用反射机制直接访问并修改私有字段。然而，提供 setter 方法可以使代码更具可维护性，尤其是在需要进行额外的逻辑处理时。</p>`,14)]))}const r=i(l,[["render",t],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/47rtphrm/","title":"ConfigurationProperties对象注入过程","lang":"zh-CN","frontmatter":{"title":"ConfigurationProperties对象注入过程","createTime":"2025/03/19 17:17:01","permalink":"/article/47rtphrm/"},"headers":[],"readingTime":{"minutes":2.03,"words":610},"git":{"updatedTime":1748077734000,"contributors":[{"name":"netjic","username":"netjic","email":"netjic@163.com","commits":1,"avatar":"https://gravatar.com/avatar/374578fe375437866193fe849b770e3f9c74eacc1a7125303870c05b7a97309d?d=retro"}]},"filePathRelative":"代码解释/@ConfigurationProperties对象注入过程.md","categoryList":[{"id":"f8a028","sort":10013,"name":"代码解释"}],"bulletin":false}');export{r as comp,h as data};
