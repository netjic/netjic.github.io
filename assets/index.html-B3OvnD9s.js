import{_ as i,c as a,a as e,o as n}from"./app-MELpoaNE.js";const l={};function t(d,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h3 id="_1-持久化方式" tabindex="-1"><a class="header-anchor" href="#_1-持久化方式"><span>1. 持久化方式</span></a></h3><ul><li>RDB（默认）：RDB持久化是将某个时间点上Redis中的数据保存到一个RDB文件中</li><li>AOF：将每一个写操作记录到一个日志文件中，当发生错误时，可以通过重新执行日志文件中的命令来恢复数据</li><li>混合持久化：既有 RDB 又有 AOF，默认情况下，会优先使用 AOF</li></ul><h4 id="_1-1-rdb持久化" tabindex="-1"><a class="header-anchor" href="#_1-1-rdb持久化"><span>1.1 RDB持久化</span></a></h4><p>RDB持久化是将某个时间点上Redis中的数据保存到一个RDB文件中，当Redis重启时，会根据RDB文件来恢复数据。</p><p>RDB持久化的优点：</p><ul><li>持久化的数据是经过压缩的，所以可以减少硬盘占用</li><li>持久化的数据是经过冷备份的，所以即使服务器宕机，也可以从最近一次的备份中恢复数据</li></ul><p>data目录里面有dump.rdb文件</p><h4 id="_1-2-aof持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-aof持久化"><span>1.2 AOF持久化</span></a></h4><p>AOF持久化是将每一个写操作记录到一个日志文件中，当Redis重启时，会根据日志文件中的命令来恢复数据。</p><p>AOF持久化的优点：</p><ul><li>持久化的数据是经过冷备份的，所以即使服务器宕机，也可以从最近一次的备份中恢复数据</li><li>持久化的数据是经过压缩的，所以可以减少硬盘占用</li></ul><p>data目录里面有个appendonlydir目录：里面有.aof文件</p><h3 id="_2-持久化配置" tabindex="-1"><a class="header-anchor" href="#_2-持久化配置"><span>2. 持久化配置</span></a></h3><h4 id="_2-1-rdb持久化" tabindex="-1"><a class="header-anchor" href="#_2-1-rdb持久化"><span>2.1 RDB持久化</span></a></h4><p>RDB持久化的配置文件为 redis.conf，配置文件中有如下配置：</p><p>手动触发：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用SAVE命令可以手动触发RDB持久化操作，该命令会「阻塞服务器」的主线程，直到RDB文件生成完成为止。这个命令适合用于测试或紧急情况下的数据备份。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 控制台 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用BGSAVE命令可以在后台触发RDB持久化操作，这个命令会派生一个子进程来执行RDB持久化，「不会阻塞服务器」的主线程。这是比较常用的生成RDB文件的方式。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">BGSAVE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动触发：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 可以通过配置文件中的参数来自动触发RDB持久化操作。在配置文件（redis.conf）中可以设置save参数，用于指定在何时执行RDB持久化操作，例如：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开启RDB持久化</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 900</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 300</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这表示当900秒内至少发生1次写操作、300秒内至少发生10次写操作、60秒内至少发生10000次写操作时，自动触发BGSAVE命令。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 无论是手动触发还是后台触发，RDB持久化操作都会生成一个RDB文件，其中包含了内存中的数据快照。需要注意的是，RDB持久化是一个资源密集型操作，可能会影响服务器的性能，特别是在数据集较大的情况下。因此，在选择何时执行RDB持久化时，需要根据业务需求和性能要求做出权衡。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-aof持久化" tabindex="-1"><a class="header-anchor" href="#_2-2-aof持久化"><span>2.2 AOF持久化</span></a></h4><p>AOF持久化的配置文件为 redis.conf，配置文件中有如下配置：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开启AOF持久化</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendonly</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开启AOF持久化后，每执行一条会修改数据的命令，AOF文件就会记录下来，当服务器重启时，会根据AOF文件的内容将写操作从头执行一遍，达到和从RDB文件恢复数据一样的效果。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6379:6379</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /Users/jichuang/docker/redis/redis.conf:/etc/redis/redis.conf</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /Users/jichuang/docker/redis/data:/data</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis-server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/redis/redis.conf</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --appendonly</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker 启动的参数 --appendonly yes 开启 AOF 持久化</p>`,24)]))}const h=i(l,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/s2kgusl9/","title":"Redis持久化","lang":"zh-CN","frontmatter":{"title":"Redis持久化","createTime":"2023/11/27 15:34:06","tags":["redis"],"permalink":"/article/s2kgusl9/"},"headers":[],"readingTime":{"minutes":3.07,"words":920},"git":{"updatedTime":1735723707000,"contributors":[{"name":"netjic","username":"netjic","email":"netjic@163.com","commits":1,"avatar":"https://gravatar.com/avatar/374578fe375437866193fe849b770e3f9c74eacc1a7125303870c05b7a97309d?d=retro"}]},"filePathRelative":"redis/Redis持久化.md","categoryList":[{"id":"86a1b9","sort":10009,"name":"redis"}],"bulletin":false}');export{h as comp,r as data};
