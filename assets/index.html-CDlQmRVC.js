import{_ as i,c as a,a as n,o as e}from"./app-CNZkbZ7y.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Component</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Order</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9999</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RequiredArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> EsStoreListenerAfterReturning</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SpelExpressionParser</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SPEL_EXPRESSION_PARSER</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DefaultParameterNameDiscoverer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> DEFAULT_PARAMETER_NAME_DISCOVERER</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        SPEL_EXPRESSION_PARSER </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SpelExpressionParser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        DEFAULT_PARAMETER_NAME_DISCOVERER </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> DefaultParameterNameDiscoverer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring框架中，依赖注入通常是针对实例级别的，即针对类的非静态字段进行的。这是因为Spring通过构造器注入、setter方法注入或字段注入的方式将依赖添加到Bean中，而这些方法都不适用于静态字段。</p><p>对于静态字段，它们属于类级别而非实例级别，并且通常用于表示那些在整个应用程序生命周期内不变的配置或工具类。由于静态字段不属于任何特定的对象实例，因此Spring的依赖注入机制无法直接对静态字段进行注入。</p><p>在这个类里，静态块被用来初始化两个静态变量：<code>SPEL_EXPRESSION_PARSER</code> 和 <code>DEFAULT_PARAMETER_NAME_DISCOVERER</code>。静态块是在类加载到JVM时执行的，并且只执行一次。这意味着无论创建多少个该类的实例，静态块只会运行一次，并且静态变量将在整个应用程序生命周期内可用。</p>`,4)]))}const k=i(l,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/r2eiyaqv/","title":"static修饰的字段注入情况","lang":"zh-CN","frontmatter":{"title":"static修饰的字段注入情况","createTime":"2025/03/22 11:08:46","permalink":"/article/r2eiyaqv/"},"headers":[],"readingTime":{"minutes":1.05,"words":315},"git":{"updatedTime":1748077734000,"contributors":[{"name":"netjic","username":"netjic","email":"netjic@163.com","commits":1,"avatar":"https://gravatar.com/avatar/374578fe375437866193fe849b770e3f9c74eacc1a7125303870c05b7a97309d?d=retro"}]},"filePathRelative":"代码解释/static修饰的字段注入情况.md","categoryList":[{"id":"f8a028","sort":10013,"name":"代码解释"}],"bulletin":false}');export{k as comp,r as data};
